/*
* generated by Xtext
*/
grammar InternalCoffeeScript;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package csep.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package csep.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import csep.services.CoffeeScriptGrammarAccess;

}

@parser::members {

 	private CoffeeScriptGrammarAccess grammarAccess;
 	
    public InternalCoffeeScriptParser(TokenStream input, CoffeeScriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected CoffeeScriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRootAccess().getBodyParserRuleCall_0()); 
    }
    this_Body_0=ruleBody
    { 
        $current = $this_Body_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getRootAccess().getBlockParserRuleCall_1_0()); 
    }
    this_Block_1=ruleBlock
    { 
        $current = $this_Block_1.current; 
        afterParserOrEnumRuleCall();
    }
this_TERMINATOR_2=RULE_TERMINATOR
    { 
    newLeafNode(this_TERMINATOR_2, grammarAccess.getRootAccess().getTERMINATORTerminalRuleCall_1_1()); 
    }
))
;





// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	 iv_ruleBody=ruleBody 
	 { $current=$iv_ruleBody.current; } 
	 EOF 
;

// Rule Body
ruleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getLinesLineParserRuleCall_0_0()); 
	    }
		lv_lines_0_0=ruleLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_0_0, 
        		"Line");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_TERMINATOR_1=RULE_TERMINATOR
    { 
    newLeafNode(this_TERMINATOR_1, grammarAccess.getBodyAccess().getTERMINATORTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getLinesLineParserRuleCall_1_1_0()); 
	    }
		lv_lines_2_0=ruleLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_2_0, 
        		"Line");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;





// Entry rule entryRuleLine
entryRuleLine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLineRule()); }
	 iv_ruleLine=ruleLine 
	 { $current=$iv_ruleLine.current; } 
	 EOF 
;

// Rule Line
ruleLine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLineAccess().getStmtParserRuleCall_0()); 
    }
    this_Stmt_0=ruleStmt
    { 
        $current = $this_Stmt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLineAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	 iv_ruleStmt=ruleStmt 
	 { $current=$iv_ruleStmt.current; } 
	 EOF 
;

// Rule Stmt
ruleStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getReturnStmtParserRuleCall_0()); 
    }
    this_ReturnStmt_0=ruleReturnStmt
    { 
        $current = $this_ReturnStmt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getThrowStmtParserRuleCall_1()); 
    }
    this_ThrowStmt_1=ruleThrowStmt
    { 
        $current = $this_ThrowStmt_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReturnStmt
entryRuleReturnStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStmtRule()); }
	 iv_ruleReturnStmt=ruleReturnStmt 
	 { $current=$iv_ruleReturnStmt.current; } 
	 EOF 
;

// Rule ReturnStmt
ruleReturnStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_RETURN_0=RULE_RETURN
    { 
    newLeafNode(this_RETURN_0, grammarAccess.getReturnStmtAccess().getRETURNTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStmtAccess().getExpExpressionParserRuleCall_1_0()); 
	    }
		lv_exp_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStmtRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleThrowStmt
entryRuleThrowStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThrowStmtRule()); }
	 iv_ruleThrowStmt=ruleThrowStmt 
	 { $current=$iv_ruleThrowStmt.current; } 
	 EOF 
;

// Rule ThrowStmt
ruleThrowStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_THROW_0=RULE_THROW
    { 
    newLeafNode(this_THROW_0, grammarAccess.getThrowStmtAccess().getTHROWTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThrowStmtAccess().getExpExpressionParserRuleCall_1_0()); 
	    }
		lv_exp_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThrowStmtRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getPostfixIfParserRuleCall()); 
    }
    this_PostfixIf_0=rulePostfixIf
    { 
        $current = $this_PostfixIf_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePostfixIf
entryRulePostfixIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixIfRule()); }
	 iv_rulePostfixIf=rulePostfixIf 
	 { $current=$iv_rulePostfixIf.current; } 
	 EOF 
;

// Rule PostfixIf
rulePostfixIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPostfixIfAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
RULE_POST_IF

    |		RULE_IF

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPostfixIfAccess().getPostfixIfTruePartAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=RULE_POST_IF
		{
			newLeafNode(lv_operator_2_1, grammarAccess.getPostfixIfAccess().getOperatorPOST_IFTerminalRuleCall_1_0_0_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPostfixIfRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"POST_IF");
	    }

    |		lv_operator_2_2=RULE_IF
		{
			newLeafNode(lv_operator_2_2, grammarAccess.getPostfixIfAccess().getOperatorIFTerminalRuleCall_1_0_0_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPostfixIfRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"IF");
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixIfAccess().getConditionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_condition_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixIfRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAssignmentAccess().getAssignmentAction_0_0(),
            $current);
    }
)(((((
(
ruleAssignable
)
)(
(
(
RULE_EQUAL

    |		RULE_COMPOUND_ASSIGN

)

)
)))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getLeftAssignableParserRuleCall_0_1_0_0_0_0()); 
	    }
		lv_left_1_0=ruleAssignable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"Assignable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		lv_operator_2_1=RULE_EQUAL
		{
			newLeafNode(lv_operator_2_1, grammarAccess.getAssignmentAccess().getOperatorEQUALTerminalRuleCall_0_1_0_0_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"EQUAL");
	    }

    |		lv_operator_2_2=RULE_COMPOUND_ASSIGN
		{
			newLeafNode(lv_operator_2_2, grammarAccess.getAssignmentAccess().getOperatorCOMPOUND_ASSIGNTerminalRuleCall_0_1_0_0_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"COMPOUND_ASSIGN");
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRightExpressionParserRuleCall_0_1_1_0()); 
	    }
		lv_right_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |
    { 
        newCompositeNode(grammarAccess.getAssignmentAccess().getLogicOpParserRuleCall_1()); 
    }
    this_LogicOp_4=ruleLogicOp
    { 
        $current = $this_LogicOp_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLogicOp
entryRuleLogicOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicOpRule()); }
	 iv_ruleLogicOp=ruleLogicOp 
	 { $current=$iv_ruleLogicOp.current; } 
	 EOF 
;

// Rule LogicOp
ruleLogicOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicOpAccess().getCompareOpParserRuleCall_0()); 
    }
    this_CompareOp_0=ruleCompareOp
    { 
        $current = $this_CompareOp_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
RULE_LOGIC

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicOpAccess().getBinaryExpLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_operator_2_0=RULE_LOGIC
		{
			newLeafNode(lv_operator_2_0, grammarAccess.getLogicOpAccess().getOperatorLOGICTerminalRuleCall_1_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LOGIC");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicOpAccess().getRightCompareOpParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleCompareOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicOpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"CompareOp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCompareOp
entryRuleCompareOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareOpRule()); }
	 iv_ruleCompareOp=ruleCompareOp 
	 { $current=$iv_ruleCompareOp.current; } 
	 EOF 
;

// Rule CompareOp
ruleCompareOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareOpAccess().getRelationOpParserRuleCall_0()); 
    }
    this_RelationOp_0=ruleRelationOp
    { 
        $current = $this_RelationOp_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
RULE_COMPARE

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompareOpAccess().getBinaryExpLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_operator_2_0=RULE_COMPARE
		{
			newLeafNode(lv_operator_2_0, grammarAccess.getCompareOpAccess().getOperatorCOMPARETerminalRuleCall_1_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCompareOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"COMPARE");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareOpAccess().getRightRelationOpParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleRelationOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareOpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RelationOp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationOp
entryRuleRelationOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationOpRule()); }
	 iv_ruleRelationOp=ruleRelationOp 
	 { $current=$iv_ruleRelationOp.current; } 
	 EOF 
;

// Rule RelationOp
ruleRelationOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationOpAccess().getShiftOpParserRuleCall_0()); 
    }
    this_ShiftOp_0=ruleShiftOp
    { 
        $current = $this_ShiftOp_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
RULE_RELATION

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationOpAccess().getBinaryExpLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_operator_2_0=RULE_RELATION
		{
			newLeafNode(lv_operator_2_0, grammarAccess.getRelationOpAccess().getOperatorRELATIONTerminalRuleCall_1_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"RELATION");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationOpAccess().getRightShiftOpParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleShiftOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationOpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ShiftOp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleShiftOp
entryRuleShiftOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftOpRule()); }
	 iv_ruleShiftOp=ruleShiftOp 
	 { $current=$iv_ruleShiftOp.current; } 
	 EOF 
;

// Rule ShiftOp
ruleShiftOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getShiftOpAccess().getAdditiveOpParserRuleCall_0()); 
    }
    this_AdditiveOp_0=ruleAdditiveOp
    { 
        $current = $this_AdditiveOp_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
RULE_SHIFT

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShiftOpAccess().getBinaryExpLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_operator_2_0=RULE_SHIFT
		{
			newLeafNode(lv_operator_2_0, grammarAccess.getShiftOpAccess().getOperatorSHIFTTerminalRuleCall_1_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShiftOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"SHIFT");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftOpAccess().getRightAdditiveOpParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAdditiveOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftOpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AdditiveOp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveOp
entryRuleAdditiveOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveOpRule()); }
	 iv_ruleAdditiveOp=ruleAdditiveOp 
	 { $current=$iv_ruleAdditiveOp.current; } 
	 EOF 
;

// Rule AdditiveOp
ruleAdditiveOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveOpAccess().getMathOpParserRuleCall_0()); 
    }
    this_MathOp_0=ruleMathOp
    { 
        $current = $this_MathOp_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
RULE_PLUS

    |		RULE_MINUS

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveOpAccess().getBinaryExpLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=RULE_PLUS
		{
			newLeafNode(lv_operator_2_1, grammarAccess.getAdditiveOpAccess().getOperatorPLUSTerminalRuleCall_1_0_0_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"PLUS");
	    }

    |		lv_operator_2_2=RULE_MINUS
		{
			newLeafNode(lv_operator_2_2, grammarAccess.getAdditiveOpAccess().getOperatorMINUSTerminalRuleCall_1_0_0_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"MINUS");
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveOpAccess().getRightMathOpParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMathOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveOpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MathOp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMathOp
entryRuleMathOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMathOpRule()); }
	 iv_ruleMathOp=ruleMathOp 
	 { $current=$iv_ruleMathOp.current; } 
	 EOF 
;

// Rule MathOp
ruleMathOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMathOpAccess().getUnaryOpParserRuleCall_0()); 
    }
    this_UnaryOp_0=ruleUnaryOp
    { 
        $current = $this_UnaryOp_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
RULE_MATH

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMathOpAccess().getBinaryExpLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_operator_2_0=RULE_MATH
		{
			newLeafNode(lv_operator_2_0, grammarAccess.getMathOpAccess().getOperatorMATHTerminalRuleCall_1_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMathOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MATH");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMathOpAccess().getRightUnaryOpParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMathOpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryOp
entryRuleUnaryOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOpRule()); }
	 iv_ruleUnaryOp=ruleUnaryOp 
	 { $current=$iv_ruleUnaryOp.current; } 
	 EOF 
;

// Rule UnaryOp
ruleUnaryOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((this_UNARY_0=RULE_UNARY
    { 
    newLeafNode(this_UNARY_0, grammarAccess.getUnaryOpAccess().getUNARYTerminalRuleCall_0_0_0()); 
    }

    |this_PLUS_1=RULE_PLUS
    { 
    newLeafNode(this_PLUS_1, grammarAccess.getUnaryOpAccess().getPLUSTerminalRuleCall_0_0_1()); 
    }

    |this_MINUS_2=RULE_MINUS
    { 
    newLeafNode(this_MINUS_2, grammarAccess.getUnaryOpAccess().getMINUSTerminalRuleCall_0_0_2()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getUnaryOpAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_3=ruleExpression
    { 
        $current = $this_Expression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((this_PLUS_PLUS_4=RULE_PLUS_PLUS
    { 
    newLeafNode(this_PLUS_PLUS_4, grammarAccess.getUnaryOpAccess().getPLUS_PLUSTerminalRuleCall_1_0_0()); 
    }

    |this_MINUS_MINUS_5=RULE_MINUS_MINUS
    { 
    newLeafNode(this_MINUS_MINUS_5, grammarAccess.getUnaryOpAccess().getMINUS_MINUSTerminalRuleCall_1_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getUnaryOpAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_6=ruleVariable
    { 
        $current = $this_Variable_6.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getUnaryOpAccess().getApplicationParserRuleCall_2_0()); 
    }
    this_Application_7=ruleApplication
    { 
        $current = $this_Application_7.current; 
        afterParserOrEnumRuleCall();
    }
(this_QUESTION_8=RULE_QUESTION
    { 
    newLeafNode(this_QUESTION_8, grammarAccess.getUnaryOpAccess().getQUESTIONTerminalRuleCall_2_1()); 
    }
)?))
;





// Entry rule entryRuleApplication
entryRuleApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getApplicationRule()); }
	 iv_ruleApplication=ruleApplication 
	 { $current=$iv_ruleApplication.current; } 
	 EOF 
;

// Rule Application
ruleApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationAccess().getValuePrimaryExpressionParserRuleCall_0_0()); 
	    }
		lv_value_0_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationAccess().getFeaturesFeatureCallParserRuleCall_1_0()); 
	    }
		lv_features_1_0=ruleFeatureCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_1_0, 
        		"FeatureCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureCallRule()); }
	 iv_ruleFeatureCall=ruleFeatureCall 
	 { $current=$iv_ruleFeatureCall.current; } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureCallAccess().getFunctionCallParserRuleCall_0()); 
    }
    this_FunctionCall_0=ruleFunctionCall
    { 
        $current = $this_FunctionCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureCallAccess().getPropertyAccessParserRuleCall_1()); 
    }
    this_PropertyAccess_1=rulePropertyAccess
    { 
        $current = $this_PropertyAccess_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionCallAccess().getFunctionCallAction_0(),
            $current);
    }
)(this_FUNC_EXIST_1=RULE_FUNC_EXIST
    { 
    newLeafNode(this_FUNC_EXIST_1, grammarAccess.getFunctionCallAccess().getFUNC_EXISTTerminalRuleCall_1()); 
    }
)?this_CALL_START_2=RULE_CALL_START
    { 
    newLeafNode(this_CALL_START_2, grammarAccess.getFunctionCallAccess().getCALL_STARTTerminalRuleCall_2()); 
    }
this_CALL_END_3=RULE_CALL_END
    { 
    newLeafNode(this_CALL_END_3, grammarAccess.getFunctionCallAccess().getCALL_ENDTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRulePropertyAccess
entryRulePropertyAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyAccessRule()); }
	 iv_rulePropertyAccess=rulePropertyAccess 
	 { $current=$iv_rulePropertyAccess.current; } 
	 EOF 
;

// Rule PropertyAccess
rulePropertyAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyAccessAccess().getNamedPropertyAccessParserRuleCall_0()); 
    }
    this_NamedPropertyAccess_0=ruleNamedPropertyAccess
    { 
        $current = $this_NamedPropertyAccess_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAccessAccess().getIndexedPropertyAccessParserRuleCall_1()); 
    }
    this_IndexedPropertyAccess_1=ruleIndexedPropertyAccess
    { 
        $current = $this_IndexedPropertyAccess_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNamedPropertyAccess
entryRuleNamedPropertyAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedPropertyAccessRule()); }
	 iv_ruleNamedPropertyAccess=ruleNamedPropertyAccess 
	 { $current=$iv_ruleNamedPropertyAccess.current; } 
	 EOF 
;

// Rule NamedPropertyAccess
ruleNamedPropertyAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
		lv_accessor_0_1=RULE_DOT
		{
			newLeafNode(lv_accessor_0_1, grammarAccess.getNamedPropertyAccessAccess().getAccessorDOTTerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedPropertyAccessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"accessor",
        		lv_accessor_0_1, 
        		"DOT");
	    }

    |		lv_accessor_0_2=RULE_QUESTION_DOT
		{
			newLeafNode(lv_accessor_0_2, grammarAccess.getNamedPropertyAccessAccess().getAccessorQUESTION_DOTTerminalRuleCall_0_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedPropertyAccessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"accessor",
        		lv_accessor_0_2, 
        		"QUESTION_DOT");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedPropertyAccessAccess().getNameIdParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedPropertyAccessRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Id");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_accessor_2_0=RULE_DOUBLE_COLON
		{
			newLeafNode(lv_accessor_2_0, grammarAccess.getNamedPropertyAccessAccess().getAccessorDOUBLE_COLONTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedPropertyAccessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"accessor",
        		lv_accessor_2_0, 
        		"DOUBLE_COLON");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedPropertyAccessAccess().getNameIdParserRuleCall_1_1_0()); 
	    }
		lv_name_3_0=ruleId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedPropertyAccessRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Id");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleIndexedPropertyAccess
entryRuleIndexedPropertyAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexedPropertyAccessRule()); }
	 iv_ruleIndexedPropertyAccess=ruleIndexedPropertyAccess 
	 { $current=$iv_ruleIndexedPropertyAccess.current; } 
	 EOF 
;

// Rule IndexedPropertyAccess
ruleIndexedPropertyAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_INDEX_START_0=RULE_INDEX_START
    { 
    newLeafNode(this_INDEX_START_0, grammarAccess.getIndexedPropertyAccessAccess().getINDEX_STARTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIndexedPropertyAccessAccess().getIndexIndexParserRuleCall_1_0()); 
	    }
		lv_index_1_0=ruleIndex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndexedPropertyAccessRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_1_0, 
        		"Index");
	        afterParserOrEnumRuleCall();
	    }

)
)this_INDEX_END_2=RULE_INDEX_END
    { 
    newLeafNode(this_INDEX_END_2, grammarAccess.getIndexedPropertyAccessAccess().getINDEX_ENDTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleIndex
entryRuleIndex returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexRule()); }
	 iv_ruleIndex=ruleIndex 
	 { $current=$iv_ruleIndex.current; } 
	 EOF 
;

// Rule Index
ruleIndex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
RULE_DOT_DOT

)
))=>(
(
		lv_dots_0_0=RULE_DOT_DOT
		{
			newLeafNode(lv_dots_0_0, grammarAccess.getIndexAccess().getDotsDOT_DOTTerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dots",
        		lv_dots_0_0, 
        		"DOT_DOT");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getIndexAccess().getEndExpressionParserRuleCall_0_1_0()); 
	    }
		lv_end_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndexRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
(
ruleExpression
)
)(
(
RULE_DOT_DOT

)
)))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getIndexAccess().getStartExpressionParserRuleCall_1_0_0_0_0()); 
	    }
		lv_start_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndexRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_dots_3_0=RULE_DOT_DOT
		{
			newLeafNode(lv_dots_3_0, grammarAccess.getIndexAccess().getDotsDOT_DOTTerminalRuleCall_1_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dots",
        		lv_dots_3_0, 
        		"DOT_DOT");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getIndexAccess().getEndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_end_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndexRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getIndexAccess().getExpExpressionParserRuleCall_2_0()); 
	    }
		lv_exp_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndexRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIfExpParserRuleCall_0()); 
    }
    this_IfExp_0=ruleIfExp
    { 
        $current = $this_IfExp_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((	RULE_LPAREN)=>
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParentheticalParserRuleCall_1()); 
    }
    this_Parenthetical_1=ruleParenthetical
    { 
        $current = $this_Parenthetical_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_2()); 
    }
    this_Literal_2=ruleLiteral
    { 
        $current = $this_Literal_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((	RULE_LBRACKET)=>
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayParserRuleCall_3()); 
    }
    this_Array_3=ruleArray
    { 
        $current = $this_Array_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdParserRuleCall_4()); 
    }
    this_Id_4=ruleId
    { 
        $current = $this_Id_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)this_INDENT_1=RULE_INDENT
    { 
    newLeafNode(this_INDENT_1, grammarAccess.getBlockAccess().getINDENTTerminalRuleCall_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getBodyParserRuleCall_2()); 
    }
    this_Body_2=ruleBody
    { 
        $current = $this_Body_2.current; 
        afterParserOrEnumRuleCall();
    }
)?this_OUTDENT_3=RULE_OUTDENT
    { 
    newLeafNode(this_OUTDENT_3, grammarAccess.getBlockAccess().getOUTDENTTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleIfExp
entryRuleIfExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExpRule()); }
	 iv_ruleIfExp=ruleIfExp 
	 { $current=$iv_ruleIfExp.current; } 
	 EOF 
;

// Rule IfExp
ruleIfExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpAccess().getBlocksCondBlockParserRuleCall_0_0()); 
	    }
		lv_blocks_0_0=ruleCondBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_0_0, 
        		"CondBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_ELSE_1=RULE_ELSE
    { 
    newLeafNode(this_ELSE_1, grammarAccess.getIfExpAccess().getELSETerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpAccess().getBlocksCondBlockParserRuleCall_1_1_0()); 
	    }
		lv_blocks_2_0=ruleCondBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_2_0, 
        		"CondBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))*(this_ELSE_3=RULE_ELSE
    { 
    newLeafNode(this_ELSE_3, grammarAccess.getIfExpAccess().getELSETerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpAccess().getDefaultBlockBlockParserRuleCall_2_1_0()); 
	    }
		lv_defaultBlock_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpRule());
	        }
       		set(
       			$current, 
       			"defaultBlock",
        		lv_defaultBlock_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCondBlock
entryRuleCondBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCondBlockRule()); }
	 iv_ruleCondBlock=ruleCondBlock 
	 { $current=$iv_ruleCondBlock.current; } 
	 EOF 
;

// Rule CondBlock
ruleCondBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_operator_0_0=RULE_IF
		{
			newLeafNode(lv_operator_0_0, grammarAccess.getCondBlockAccess().getOperatorIFTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCondBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"IF");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCondBlockAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCondBlockRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCondBlockAccess().getActionBlockParserRuleCall_2_0()); 
	    }
		lv_action_2_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCondBlockRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_2_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleId
entryRuleId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdRule()); }
	 iv_ruleId=ruleId 
	 { $current=$iv_ruleId.current; } 
	 EOF 
;

// Rule Id
ruleId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_IDENTIFIER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getIdAccess().getNameIDENTIFIERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"IDENTIFIER");
	    }

)
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyAccess().getIdParserRuleCall_0()); 
    }
    this_Id_0=ruleId
    { 
        $current = $this_Id_0.current; 
        afterParserOrEnumRuleCall();
    }
this_DOT_1=RULE_DOT
    { 
    newLeafNode(this_DOT_1, grammarAccess.getPropertyAccess().getDOTTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getPropIdParserRuleCall_2_0()); 
	    }
		lv_prop_2_0=ruleId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"prop",
        		lv_prop_2_0, 
        		"Id");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getIdParserRuleCall_0()); 
    }
    this_Id_0=ruleId
    { 
        $current = $this_Id_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getPropertyParserRuleCall_1()); 
    }
    this_Property_1=ruleProperty
    { 
        $current = $this_Property_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignable
entryRuleAssignable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignableRule()); }
	 iv_ruleAssignable=ruleAssignable 
	 { $current=$iv_ruleAssignable.current; } 
	 EOF 
;

// Rule Assignable
ruleAssignable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignableAccess().getVariableParserRuleCall_0()); 
    }
    this_Variable_0=ruleVariable
    { 
        $current = $this_Variable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((	RULE_LBRACKET)=>
    { 
        newCompositeNode(grammarAccess.getAssignableAccess().getArrayParserRuleCall_1()); 
    }
    this_Array_1=ruleArray
    { 
        $current = $this_Array_1.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleArg
entryRuleArg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgRule()); }
	 iv_ruleArg=ruleArg 
	 { $current=$iv_ruleArg.current; } 
	 EOF 
;

// Rule Arg
ruleArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgAccess().getExpExpressionParserRuleCall_0_0()); 
	    }
		lv_exp_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_splat_1_0=RULE_ELLIPSIS
		{
			newLeafNode(lv_splat_1_0, grammarAccess.getArgAccess().getSplatELLIPSISTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"splat",
        		true, 
        		"ELLIPSIS");
	    }

)
)?)
;





// Entry rule entryRuleArgLine
entryRuleArgLine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgLineRule()); }
	 iv_ruleArgLine=ruleArgLine 
	 { $current=$iv_ruleArgLine.current; } 
	 EOF 
;

// Rule ArgLine
ruleArgLine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgLineAccess().getHeadArgParserRuleCall_0_0()); 
	    }
		lv_head_0_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgLineRule());
	        }
       		set(
       			$current, 
       			"head",
        		lv_head_0_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getArgLineAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgLineAccess().getTailArgParserRuleCall_1_1_0()); 
	    }
		lv_tail_2_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgLineRule());
	        }
       		add(
       			$current, 
       			"tail",
        		lv_tail_2_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getArgLineAccess().getCOMMATerminalRuleCall_2()); 
    }
)?)
;





// Entry rule entryRuleExplicitArgList
entryRuleExplicitArgList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExplicitArgListRule()); }
	 iv_ruleExplicitArgList=ruleExplicitArgList 
	 { $current=$iv_ruleExplicitArgList.current; } 
	 EOF 
;

// Rule ExplicitArgList
ruleExplicitArgList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExplicitArgListAccess().getLinesArgLineParserRuleCall_0_0()); 
	    }
		lv_lines_0_0=ruleArgLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplicitArgListRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_0_0, 
        		"ArgLine");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_TERMINATOR_1=RULE_TERMINATOR
    { 
    newLeafNode(this_TERMINATOR_1, grammarAccess.getExplicitArgListAccess().getTERMINATORTerminalRuleCall_1_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExplicitArgListAccess().getLinesArgLineParserRuleCall_1_0_1_0()); 
	    }
		lv_lines_2_0=ruleArgLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplicitArgListRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_2_0, 
        		"ArgLine");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_INDENT_3=RULE_INDENT
    { 
    newLeafNode(this_INDENT_3, grammarAccess.getExplicitArgListAccess().getINDENTTerminalRuleCall_1_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExplicitArgListAccess().getLinesArgLineParserRuleCall_1_1_1_0()); 
	    }
		lv_lines_4_0=ruleArgLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplicitArgListRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_4_0, 
        		"ArgLine");
	        afterParserOrEnumRuleCall();
	    }

)
)this_OUTDENT_5=RULE_OUTDENT
    { 
    newLeafNode(this_OUTDENT_5, grammarAccess.getExplicitArgListAccess().getOUTDENTTerminalRuleCall_1_1_2()); 
    }
))*)
;





// Entry rule entryRuleArgList
entryRuleArgList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgListRule()); }
	 iv_ruleArgList=ruleArgList 
	 { $current=$iv_ruleArgList.current; } 
	 EOF 
;

// Rule ArgList
ruleArgList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgListAccess().getArgListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getArgListAccess().getDummyExplicitArgListParserRuleCall_1_0_0()); 
	    }
		lv_dummy_1_0=ruleExplicitArgList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgListRule());
	        }
       		set(
       			$current, 
       			"dummy",
        		lv_dummy_1_0, 
        		"ExplicitArgList");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(this_INDENT_2=RULE_INDENT
    { 
    newLeafNode(this_INDENT_2, grammarAccess.getArgListAccess().getINDENTTerminalRuleCall_1_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgListAccess().getDummyExplicitArgListParserRuleCall_1_1_1_0()); 
	    }
		lv_dummy_3_0=ruleExplicitArgList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgListRule());
	        }
       		set(
       			$current, 
       			"dummy",
        		lv_dummy_3_0, 
        		"ExplicitArgList");
	        afterParserOrEnumRuleCall();
	    }

)
)this_OUTDENT_4=RULE_OUTDENT
    { 
    newLeafNode(this_OUTDENT_4, grammarAccess.getArgListAccess().getOUTDENTTerminalRuleCall_1_1_2()); 
    }
))?)
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	RULE_LBRACKET)=>this_LBRACKET_0=RULE_LBRACKET
    { 
    newLeafNode(this_LBRACKET_0, grammarAccess.getArrayAccess().getLBRACKETTerminalRuleCall_0()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getArrayAccess().getArgListParserRuleCall_1()); 
    }
    this_ArgList_1=ruleArgList
    { 
        $current = $this_ArgList_1.current; 
        afterParserOrEnumRuleCall();
    }
this_RBRACKET_2=RULE_RBRACKET
    { 
    newLeafNode(this_RBRACKET_2, grammarAccess.getArrayAccess().getRBRACKETTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current; } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0(),
            $current);
    }
)this_NUMBER_1=RULE_NUMBER
    { 
    newLeafNode(this_NUMBER_1, grammarAccess.getNumberLiteralAccess().getNUMBERTerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(),
            $current);
    }
)this_STRING_1=RULE_STRING
    { 
    newLeafNode(this_STRING_1, grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolLiteralRule()); }
	 iv_ruleBoolLiteral=ruleBoolLiteral 
	 { $current=$iv_ruleBoolLiteral.current; } 
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBoolLiteralAccess().getBoolLiteralAction_0(),
            $current);
    }
)this_BOOL_1=RULE_BOOL
    { 
    newLeafNode(this_BOOL_1, grammarAccess.getBoolLiteralAccess().getBOOLTerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); 
    }
    this_NumberLiteral_0=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); 
    }
    this_StringLiteral_1=ruleStringLiteral
    { 
        $current = $this_StringLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBoolLiteralParserRuleCall_2()); 
    }
    this_BoolLiteral_2=ruleBoolLiteral
    { 
        $current = $this_BoolLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthetical
entryRuleParenthetical returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParentheticalRule()); }
	 iv_ruleParenthetical=ruleParenthetical 
	 { $current=$iv_ruleParenthetical.current; } 
	 EOF 
;

// Rule Parenthetical
ruleParenthetical returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	RULE_LPAREN)=>this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getParentheticalAccess().getLPARENTerminalRuleCall_0()); 
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParentheticalAccess().getContentBodyParserRuleCall_1_0()); 
	    }
		lv_content_1_0=ruleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParentheticalRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_1_0, 
        		"Body");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAREN_2=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_2, grammarAccess.getParentheticalAccess().getRPARENTerminalRuleCall_2()); 
    }
)
;





RULE_ELLIPSIS : '...';

RULE_DOT_DOT : '..';

RULE_DOUBLE_COLON : '::';

RULE_SHIFT : ('<<'|'>>');

RULE_COMPARE : ('<'|'=='|'>'|'<='|'>='|'!=');

RULE_COMPOUND_ASSIGN : ('+='|'-=');

RULE_PLUS_PLUS : '++';

RULE_MINUS_MINUS : '--';

RULE_AT_SIGIL : '@';

RULE_BOOL : ('true'|'false'|'undefined'|'null');

RULE_BOUND_FUNC_ARROW : 'dummy BOUND_FUNC_ARROW';

RULE_BY : 'dummy BY';

RULE_CALL_END : '*)';

RULE_CALL_START : '(*';

RULE_CATCH : 'dummy CATCH';

RULE_CLASS : 'class';

RULE_COLON : ':';

RULE_COLON_SLASH : 'dummy COLON_SLASH';

RULE_COMMA : 'dummy COMMA';

RULE_DOT : '.';

RULE_ELSE : 'else';

RULE_EQUAL : '=';

RULE_EXTENDS : 'dummy EXTENDS';

RULE_FINALLY : 'dummy FINALLY';

RULE_FOR : 'dummy FOR';

RULE_FORIN : 'dummy FORIN';

RULE_FOROF : 'dummy FOROF';

RULE_FUNC_ARROW : 'dummy FUNC_ARROW';

RULE_FUNC_EXIST : 'dummy FUNC_EXIST';

RULE_HERECOMMENT : 'dummy HERECOMMENT';

RULE_IF : ('if'|'unless');

RULE_INDENT : '{*';

RULE_INDEX_END : '*]';

RULE_INDEX_PROTO : 'dummy INDEX_PROTO';

RULE_INDEX_SOAK : 'dummy INDEX_SOAK';

RULE_INDEX_START : '[*';

RULE_JS : 'dummy JS';

RULE_LBRACKET : '[';

RULE_LCURLY : 'dummy LCURLY';

RULE_LEADING_WHEN : 'dummy LEADING_WHEN';

RULE_LOGIC : ('&&'|'||');

RULE_LOOP : 'dummy LOOP';

RULE_LPAREN : '(';

RULE_MATH : ('*'|'/');

RULE_MINUS : '-';

RULE_NEW : 'dummy NEW';

RULE_NUMBER : ('0'..'9')+;

RULE_OUTDENT : '*}';

RULE_OWN : 'dummy OWN';

RULE_PARAM_END : 'dummy PARAM_END';

RULE_PARAM_START : 'dummy PARAM_START';

RULE_PLUS : '+';

RULE_POST_IF : 'dummy POST_IF';

RULE_QUESTION : '?';

RULE_QUESTION_DOT : '?.';

RULE_RBRACKET : ']';

RULE_RCURLY : 'dummy RCURLY';

RULE_REGEX : 'dummy REGEX';

RULE_RELATION : ('in'|'of'|'instanceof');

RULE_RETURN : 'return';

RULE_RPAREN : ')';

RULE_STATEMENT : 'dummy STATEMENT';

RULE_STRING : '"' ('a'..'z'|' ')* '"';

RULE_SUPER : 'dummy SUPER';

RULE_SWITCH : 'dummy SWITCH';

RULE_TERMINATOR : '\n'+;

RULE_THEN : 'dummy THEN';

RULE_THIS : 'dummy THIS';

RULE_THROW : 'throw';

RULE_TRY : 'dummy TRY';

RULE_UNARY : ('!'|'~'|'new');

RULE_UNTIL : 'dummy UNTIL';

RULE_WHEN : 'dummy WHEN';

RULE_WHILE : 'dummy WHILE';

RULE_IDENTIFIER : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WS : (' '|'\t')+;


